import os
import time
import streamlit as st
import google.generativeai as genai
from utils.cache_manager import cached_response, cache_manager
from utils.logger import get_logger

class AIAgent:
    def __init__(self):
        """Initialise l'agent IA avec le contexte tunisien"""
        # Cl√© API Gemini simple
        api_key = "AIzaSyCpSrL4p1kGyA2Ub0tpc6iVmiz_Nvk_ftM"
        
        # Afficher la cl√© API dans la sidebar
        st.sidebar.info(f"üîë Cl√© API : nope")
        
        genai.configure(api_key=api_key)
        
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-1.5-flash')
        
        # Contexte sp√©cifique √† la Tunisie
        self.tunisian_context = """
        Vous √™tes TunisiaTourAI, un expert sp√©cialis√© dans le tourisme, la culture, l'histoire et les traditions de la Tunisie.
        
        Votre r√¥le :
        - R√©pondre UNIQUEMENT aux questions concernant la Tunisie
        - Fournir des informations pr√©cises sur les destinations, monuments, festivals, culture, gastronomie, histoire, traditions
        - Donner des conseils de voyage pratiques pour la Tunisie
        - Recommander des itin√©raires et activit√©s en Tunisie
        - Expliquer les coutumes et traditions tunisiennes
        
        Si une question ne concerne pas la Tunisie, poliment redirigez vers des sujets tunisiens en disant quelque chose comme :
        "Je suis sp√©cialis√© dans la Tunisie. Puis-je vous aider avec des questions sur les destinations, monuments, festivals ou la culture tunisienne ?"
        
        R√©pondez toujours en fran√ßais de mani√®re d√©taill√©e, engageante et informative.
        Incluez des d√©tails culturels, historiques et pratiques quand c'est pertinent.
        """
        
        # Initialiser le logger
        self.logger = get_logger()
    
    @cached_response
    def ask(self, question, context=None):
        """Pose une question √† l'IA avec le contexte tunisien (avec cache et logs)"""
        start_time = time.time()
        
        try:
            # Combiner le contexte tunisien avec la question
            full_prompt = f"{self.tunisian_context}\n\nQuestion: {question}"
            
            if context:
                full_prompt = f"{self.tunisian_context}\n\nContexte: {context}\n\nQuestion: {question}"
            
            response = self.model.generate_content(full_prompt)
            response_text = response.text
            
            # Logger la requ√™te r√©ussie
            duration = time.time() - start_time
            self.logger.log_ai_request(question, response_text, duration, True)
            
            return response_text
            
        except Exception as e:
            duration = time.time() - start_time
            
            # Logger l'erreur
            self.logger.log_ai_request(question, str(e), duration, False)
            
            if "quota" in str(e).lower() or "429" in str(e):
                return "‚ö†Ô∏è Vous avez d√©pass√© la limite gratuite de l'IA Gemini. Attendez quelques minutes ou cr√©ez une nouvelle cl√© API sur https://aistudio.google.com/app/apikey."
            return f"D√©sol√©, je rencontre une difficult√© technique. Veuillez r√©essayer. Erreur: {str(e)}"
    
    def get_tunisian_recommendation(self, category, preferences=None):
        """Obtient des recommandations sp√©cifiques √† la Tunisie"""
        try:
            prompt = f"""
            En tant qu'expert de la Tunisie, donnez-moi des recommandations pour la cat√©gorie : {category}
            
            Pr√©f√©rences sp√©cifi√©es : {preferences if preferences else 'Aucune'}
            
            Fournissez :
            1. 3-5 recommandations d√©taill√©es
            2. Pourquoi ces choix sont excellents
            3. Conseils pratiques pour la visite
            4. Informations culturelles pertinentes
            
            R√©pondez en fran√ßais de mani√®re structur√©e et engageante.
            """
            
            response = self.model.generate_content(prompt)
            return response.text
            
        except Exception as e:
            return f"Impossible de g√©n√©rer des recommandations pour {category}. Erreur: {str(e)}"
    
    def plan_tunisian_trip(self, duration, interests, budget, season):
        """Planifie un voyage en Tunisie personnalis√©"""
        try:
            prompt = f"""
            Cr√©ez un itin√©raire de voyage personnalis√© pour la Tunisie :
            
            Dur√©e : {duration} jours
            Int√©r√™ts : {interests}
            Budget : {budget}
            Saison : {season}
            
            Cr√©ez un planning d√©taill√© avec :
            1. Itin√©raire jour par jour
            2. Lieux √† visiter avec explications
            3. Restaurants recommand√©s
            4. Conseils pratiques (transport, h√©bergement)
            5. Budget estim√©
            6. Conseils culturels et de s√©curit√©
            
            R√©pondez en fran√ßais de mani√®re structur√©e et engageante.
            """
            
            response = self.model.generate_content(prompt)
            return response.text
            
        except Exception as e:
            return f"Impossible de planifier le voyage. Erreur: {str(e)}"
    
    def explain_tunisian_culture(self, topic):
        """Explique un aspect de la culture tunisienne"""
        try:
            prompt = f"""
            Expliquez en d√©tail l'aspect culturel tunisien suivant : {topic}
            
            Incluez :
            1. Contexte historique
            2. Importance culturelle
            3. Traditions actuelles
            4. Conseils pour les visiteurs
            5. Anecdotes int√©ressantes
            
            R√©pondez en fran√ßais de mani√®re engageante et informative.
            """
            
            response = self.model.generate_content(prompt)
            return response.text
            
        except Exception as e:
            return f"Impossible d'expliquer {topic}. Erreur: {str(e)}" 
